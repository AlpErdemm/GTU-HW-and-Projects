(setq theFile "151044006.tree")
(setq tab_count 3)
(setf token-list '(("operator" "(") ("keyword" "deffun") ("unknown" "check_coord")
	 ("operator" "(") ("identifier" "x") ("identifier" "y")
	 ("operator" ")") ("operator" "(") ("keyword" "if") ("operator" "(")
	 ("keyword" "and") ("operator" "(") ("keyword" "equal")
	 ("identifier" "x") ("integer" "1") ("operator" ")") ("operator" "(")
	 ("keyword" "equal") ("identifier" "y") ("integer" "2")
	 ("operator" ")") ("operator" ")") ("integer" "1")("integer" "0") ("operator" ")")
	 ("operator" ")")))
(setf list-essence (cdr (cdr token-list)))

(defun print-each-term (token-list)
	(if (equal (car token-list) NIL)
		(return-from print-each-term 0)
	)
	(with-open-file (str theFile :direction :output
	   :if-exists :append
	   :if-does-not-exist :create)
       (format str "~S~%" (car token-list))
       (close str)
    )
	(print-each-term (cdr token-list))
)

(defun parser (token-list)
	(with-open-file (str theFile :direction :output
	   :if-exists :append
	   :if-does-not-exist :create)
	
	   (format str "DIRECTIVE: parse tree~%")
       (format str "START~%")
       (format str "~CINPUT~%" #\tab)
       (format str "~C~CEXPI~%" #\tab #\tab)
       (format str "~C~C~C(~%" #\tab #\tab #\tab) 
       (format str "~C~C~Cdeffun~%" #\tab #\tab #\tab) 
       (format str "~C~C~CID~%" #\tab #\tab #\tab) 
       (close str)
    )
    (handle_deffun list-essence)
)

(defun handle_deffun (theList)
	(setq theTing (car (cdr (car theList))))
	(with-open-file (str theFile :direction :output
	   :if-exists :append
	   :if-does-not-exist :create)
       (format str "~C~C~C~C~d~%" #\tab #\tab #\tab #\tab theTing)
       (format str "~C~C~CIDLIST~%" #\tab #\tab #\tab #\tab) 
       (format str "~C~C~C~C(~%" #\tab #\tab #\tab #\tab)   
       (close str)
    )	
    (setq list-essence (cdr (cdr list-essence)))
    (handle_idlist list-essence)
    (setq tab_count 4)
    (print_with_tabs ")" tab_count)
    (print_with_tabs "EXPLISTI" (- tab_count 1))
    (print_with_tabs "(" tab_count)
    (setq list-essence (cdr (cdr list-essence)))

    (handle_explist list-essence)
)

(defun handle_explist (theList)
    (if (equal (get_nth_term_first list-essence 0) "keyword")
    	(handle_keyword theList)
    )
    (if (equal (get_nth_term_first list-essence 0) "operator")
    	(handle_operator theList)
    )    
)

(defun handle_operator (theList)

)
(defun handle_keyword (theList)
	(if (equal (get_nth_term_second list-essence 0) "if")
		(progn
			(handle_if theList)
			(return-from handle_keyword 0)
		)
	)
	(if (equal (get_nth_term_second list-essence 0) "equal")
		(progn
			(handle_equal theList)
			(return-from handle_keyword 0)
		)
	)
	(if (equal (get_nth_term_second list-essence 0) "and")
		(progn
			(handle_and theList)
			(return-from handle_keyword 0)
		)
	)
)
(defun handle_and (theList)
	(setq tab_count (+ tab_count 1))
	(print_with_tabs "(" tab_count)
	(print_with_tabs "and" tab_count)
	;(print_with_tabs "EXPB" tab_count)
	(if (equal (get_nth_term_first list-essence 2) "keyword")
		(progn
			(print_with_tabs "EXPB" tab_count)
			(setq list-essence (cdr(cdr list-essence)))
			(handle_keyword list-essence)

			;(print_with_tabs ")" (+ tab_count 1))
			(print_with_tabs "EXPB" tab_count)
			;(setq tab_count (+ tab_count 1))
			;(print_with_tabs "(" tab_count)

			(setq list-essence (cdr(cdr(cdr(cdr list-essence)))))
			;(print (car list-essence))
			(handle_keyword list-essence)
			(print_with_tabs ")" tab_count)
			(handle_if_exp (cdr(cdr(cdr(cdr list-essence)))))
		)
		(progn
			(print_with_tabs "EXPI" tab_count)
			(if (equal (get_nth_term_first list-essence 1) "integer")
				(progn
					(print_with_tabs "VALUES" (+ tab_count 1))
					(print_with_tabs "IntegerValue" (+ tab_count 2))
					(print_with_tabs (get_nth_term_second list-essence 1) (+ tab_count 3))
				)
			)	
			(if (equal (get_nth_term_first list-essence 1) "identifier")
				(progn
					(print_with_tabs "ID" (+ tab_count 1))
					(print_with_tabs (get_nth_term_second list-essence 1) (+ tab_count 2))
				)
			)
			(if (equal (get_nth_term_first list-essence 2) "identifier")
				(progn
					(print_with_tabs "ID" (+ tab_count 1))
					(print_with_tabs (get_nth_term_second list-essence 2) (+tab_count 2))
				)
			)		
			(if (equal (get_nth_term_first list-essence 2) "integer")
				(progn
					(print_with_tabs "VALUES" (+ tab_count 1))
					(print_with_tabs "IntegerValue" (+ tab_count 2))
					(print_with_tabs (get_nth_term_second list-essence 2) (+ tab_count 3))
				)		
			)			
		)
	)
;	(setq tab_count (+ tab_count 1))
)

(defun handle_if_exp (theList)
	(setq tab_count (- tab_count 1))
	(if (equal (get_nth_term_first theList 0) "integer")
		(progn
			(print_with_tabs "EXPLISTI" tab_count)
			(print_with_tabs "EXPI" (+ tab_count 1))
			(print_with_tabs "VALUES" (+ tab_count 2))
			(print_with_tabs "IntegerValue" (+ tab_count 3))
			(print_with_tabs (get_nth_term_second theList 0) (+ tab_count 4))
		)
	)	
	(if (equal (get_nth_term_first theList 0) "identifier")
		(progn
			(print_with_tabs "EXPLISTI" tab_count)
			(print_with_tabs "EXPI" (+ tab_count 1))
			(print_with_tabs "ID" (+ tab_count 2))
			(print_with_tabs (get_nth_term_second theList 0) (+ tab_count 3))
		)
	)
	(if (equal (get_nth_term_first theList 1) "identifier")
		(progn
			(print_with_tabs "EXPLISTI" tab_count)
			(print_with_tabs "EXPI" (+ tab_count 1))
			(print_with_tabs "ID" (+ tab_count 2))
			(print_with_tabs (get_nth_term_second theList 1) (+ tab_count 3))
		)
	)		
	(if (equal (get_nth_term_first theList 1) "integer")
		(progn
			(print_with_tabs "EXPLISTI" tab_count)
			(print_with_tabs "EXPI" (+ tab_count 1))
			(print_with_tabs "VALUES" (+ tab_count 2))
			(print_with_tabs "IntegerValue" (+ tab_count 3))
			(print_with_tabs (get_nth_term_second theList 1) (+ tab_count 4))
		)
	)
	;(if (equal (get_nth_term_first list-essence)))

)

(defun handle_equal (theList)
	(setq tab_count (+ tab_count 1))
	(print_with_tabs "(" tab_count)
	(print_with_tabs "equal" tab_count)
	(if (equal (get_nth_term_first list-essence 1) "integer")
		(progn
			(print_with_tabs "EXPI" tab_count)
			(print_with_tabs "VALUES" (+ tab_count 1))
			(print_with_tabs "IntegerValue" (+ tab_count 2))
			(print_with_tabs (get_nth_term_second list-essence 1) (+ tab_count 3))
		)
	)	
	(if (equal (get_nth_term_first list-essence 1) "identifier")
		(progn
			(print_with_tabs "EXPI" tab_count)
			(print_with_tabs "ID" (+ tab_count 1))
			(print_with_tabs (get_nth_term_second list-essence 1) (+ tab_count 2))
		)
	)
	(if (equal (get_nth_term_first list-essence 2) "identifier")
		(progn
			(print_with_tabs "EXPI" tab_count)
			(print_with_tabs "ID" (+ tab_count 1))
			(print_with_tabs (get_nth_term_second list-essence 2) (+ tab_count 2))
		)
	)		
	(if (equal (get_nth_term_first list-essence 2) "integer")
		(progn
			(print_with_tabs "EXPI" tab_count)
			(print_with_tabs "VALUES" (+ tab_count 1))
			(print_with_tabs "IntegerValue" (+ tab_count 2))
			(print_with_tabs (get_nth_term_second list-essence 2) (+ tab_count 3))
		)
	)
	(print_with_tabs ")" tab_count)
	(setq tab_count (- tab_count 1))	
	(setq list-essence (cdr list-essence))		
)

(defun handle_if (theList)
	(print_with_tabs "if" tab_count)
	(print_with_tabs "EXPB" tab_count)
	;(setq tab_count (+ tab_count 1))
	;(print_with_tabs "(" tab_count)
	(setq list-essence (cdr (cdr list-essence)))
	(if (equal (get_nth_term_first list-essence 0) "keyword")
		(progn
			;(print_with_tabs (get_nth_term_second list-essence 0) tab_count)
			(handle_keyword list-essence)
			;(print_with_tabs ")" tab_count)
		)
	)
)

(defun handle_idlist (theList)
	(if (equal (get_nth_term_second theList 1) ")")
		(progn
			(setq list-essence (cdr list-essence))
			(handle_id theList)
			(return-from handle_idlist 0)
		)
	)
	(setq list-essence (cdr list-essence))
	(print_idlist theList)
	(handle_idlist (cdr theList))
)

(defun get_nth_term_first (theList n)
	(if (equal n 0)
		(return-from get_nth_term_first (car (car theList)))
	)
	(get_nth_term_first (cdr theList) (- n 1))
)

(defun get_nth_term_second (theList n)
	(if (equal n 0)
		(return-from get_nth_term_second (car (cdr (car theList))))
	)
	(get_nth_term_second (cdr theList) (- n 1))
)

(defun handle_id (theList)
	(print_with_tabs "IDLIST" tab_count)
	(print_with_tabs "ID" (+ tab_count 1))
	(print_with_tabs (get_nth_term_second theList 0) (+ tab_count 2))
)

(defun print_idlist (theList)
	(setq tab_count (+ tab_count 1))
	(print_with_tabs "IDLIST" tab_count)
	(print_with_tabs (get_nth_term_second theList 0) (+ tab_count 1))
)

(defun print_with_tabs (word tabs)
	(if (equal tabs 0)
		(progn
			(with-open-file (str theFile :direction :output
		  		:if-exists :append
		   		:if-does-not-exist :create)
				(format str "~d~%" word)
	      		(close str)
	    	)
    		(return-from print_with_tabs 0)
    	)
    )

	(with-open-file (str theFile :direction :output
	   :if-exists :append
	   :if-does-not-exist :create)
	   (format str "~C" #\tab)
       (close str)
    )
    (setq tabs (- tabs 1))
    (print_with_tabs word tabs)
)

(parser token-list)